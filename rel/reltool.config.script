%% -*- tab-width: 4;erlang-indent-level: 4;indent-tabs-mode: nil -*-
%% ex: ft=erlang ts=4 sw=4 et
%%
% Licensed under the Apache License, Version 2.0 (the "License"); you may not
% use this file except in compliance with the License. You may obtain a copy of
% the License at
%
%   http://www.apache.org/licenses/LICENSE-2.0
%
% Unless required by applicable law or agreed to in writing, software
% distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
% WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
% License for the specific language governing permissions and limitations under
% the License.

Cfg = case file:consult("../pkg.vars.config") of
          {ok, Terms} ->
              Terms;
          _Err ->
              []
      end,


%% get version infos
MajorVersion = integer_to_list(proplists:get_value(version_major, Cfg, 0)),
MinorVersion = integer_to_list(proplists:get_value(version_minor, Cfg, 0)),
RevVersion = integer_to_list(proplists:get_value(version_revision, Cfg, 0)),
StageVersion = proplists:get_value(version_stage, Cfg, ""),
RelVersion = proplists:get_value(version_release, Cfg, ""),

%% build the version
BaseVersion = MajorVersion ++ "." ++ MinorVersion ++ "." ++ RevVersion,
SecondaryVersion = StageVersion ++ RelVersion,
Vsn = case os:getenv("RELEASE") of
    "1" ->
        BaseVersion;
    _ ->
        BaseVersion ++ SecondaryVersion
end,

CouchJSName = proplists:get_value(couchjs_name, Cfg, "couchjs"),

[
    {sys, [
            {lib_dirs, ["../deps", "../apps"]},
            {rel, "couchdb", Vsn,
                [
                    kernel,
                    stdlib,
                    sasl,
                    public_key,
                    ssl,
                    os_mon,
                    crypto,
                    inets,
                    xmerl,
                    runtime_tools,
                    mochiweb,
                    ibrowse,
                    oauth,
                    jiffy,
                    snappy,
                    couch,
                    couch_collate,
                    couch_index,
                    couch_mrview,
                    couch_replicator,
                    couch_dbupdates
                ]},
            {rel, "start_clean", "", [kernel, stdlib]},
            {boot_rel, "couchdb"},
            {profile, embedded},
            {relocatable, true},
            {app_file, strip},
            {debug_info, strip},
            {incl_cond, exclude},

            {excl_sys_filters, ["^bin/.*", "^erts.*/bin/(dialyzer|typer)"]},
            {excl_archive_filters, [".*"]},

            %% stdlib
            {app, asn1, [{incl_cond, include}]},
            {app, sasl, [{incl_cond, include}]},
            {app, crypto, [{incl_cond, include}]},
            {app, public_key, [{incl_cond, include}]},
            {app, ssl, [{incl_cond, include}]},
            {app, xmerl, [{incl_cond, include}]},

            {app, kernel, [{incl_cond, include}]},
            {app, stdlib, [{incl_cond, include}]},
            {app, inets, [{incl_cond, include}]},
            {app, os_mon, [{incl_cond, include}]},
            {app, compiler, [{incl_cond, include}]},
            {app, syntax_tools, [{incl_cond, include}]},
            {app, runtime_tools, [{incl_cond, include}]},

            %% dependencies
            {app, mochiweb, [{incl_cond, include}]},
            {app, oauth, [{incl_cond, include}]},
            {app, jiffy, [{incl_cond, include}]},
            {app, snappy, [{incl_cond, include}]},
            {app, ibrowse, [{incl_cond, include}]},

            %% couchdb
            {app, couch, [{incl_cond, include}]},
            {app, couch_collate, [{incl_cond, include}]},
            {app, couch_index, [{incl_cond, include}]},
            {app, couch_mrview, [{incl_cond, include}]},
            {app, couch_replicator, [{incl_cond, include}]},
            {app, couch_dbupdates, [{incl_cond, include}]},
            {app, couch_plugins, [{incl_cond, include}]}

        ]},

    {target_dir, "apache-couchdb"},

    {overlay_vars, "vars.config"},

    {overlay, [
        {mkdir, "log"},
        {mkdir, "run"},
        {mkdir, "data"},

        %% keep empty files
        {copy, "files/empty", "log/KEEP"},
        {copy, "files/empty", "data/KEEP"},

        %% Copy base files for starting and interacting w/ node
        {copy, "../deps/node_package/priv/base/erl", "{{erts_vsn}}/bin/erl"},
        {copy, "../deps/node_package/priv/base/nodetool", "{{erts_vsn}}/bin/nodetool"},
        {template, "../deps/node_package/priv/base/runner", "bin/couchdb"},
        {template, "../deps/node_package/priv/base/env.sh", "lib/env.sh"},


        %% config files
        {template, "files/app.config", "etc/app.config"},
        {template, "files/vm.args", "etc/vm.args"},
        {template, "files/couch.ini", "etc/couch.ini"},
        {template, "files/local.ini", "etc/local.ini"},

        %% couchdb data files
        {copy, "../share"},
        {copy, "../apps/couch/priv/" ++ CouchJSName, "bin/" ++ CouchJSName},

        %% misc
        {mkdir, "lib/couch-patches"},
        {copy, "../apps/couch_rel/ebin/etop_txt.beam", "lib/couch-patches"}

    ]}
].
